// 아래 날짜 formatting을 위한 Class Import
import java.text.SimpleDateFormat

// 날짜 포맷 생성
def dateFormat = new SimpleDateFormat("yy.MM.dd.HH.mm")

// 현재 시간 객체 생성
def date = new Date()

pipeline {
    agent any

    // 빌드 실행 시 사용자가 선택 or 입력하는 파라미터
    parameters {
        choice(
            name: 'BUILD_TYPE',
            choices: ['Branch', 'Tag'],
            description: 'Build할 대상을 선택하세요'
        )
        string(
            name: 'TAG_NAME',
            defaultValue: '',
            description: '⚠️ Tag를 선택한 경우에만 입력하세요! (예: v1.0.0)'
        )
    }
    
    options {
        timeout(time: 30, unit: "MINUTES")

        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: "10"))
    }
    
    environment {
        // APP
        NAME = "carfreecar-backend-api"                                 // 프로젝트명
        
        // Git
        GIT = "github.com/turucar/${NAME}.git"                          // 메인 애플리케이션 Git repo
        GIT_BRANCH = "product"                                          // Checkout할 branch
        GIT_DEVOPS = "github.com/turucar/DevOps.git"                    // DevOps 스크립트 repo
        GIT_DEVOPS_CODEDEPLOY_PATH = "Carplat/Prd/CodeDeploy/AP/API"    // CodeDeploy 관련 스크립트 repo
        
        // Build
        BUILDER_LOCATION = "./gradlew"                                  // Gradle Wrapper 실행 경로

        // CodeDeploy
        CODEDEPLOY_S3_BUCKET_NAME = "carplat-prd-s3-cd-ap"              // CodeDeploy 스크립트, 배포 파일을 업로드할 S3 Bucket 이름
        CODEDEPLOY_S3_BUCKET_FOLDER = "carplat-prd-backend-api"         // 위 Bucket 내 폴더(Prefix) 이름
        CODEDEPLOY_APPLICATION_NAME = "CARPLAT-PRD-CD-AP-AP-API"        // CodeDeploy Application Name
        CODEDEPLOY_DEPLOYMENT_GROUP_NAME = "CARPLAT-PRD-CD-DG-AP-API"   // CodeDeploy Deployment Group Name
    }
    
    stages {
        stage("checkout") {
            steps {
                script {
                    if (params.BUILD_TYPE == 'Tag') {
                        if (!params.TAG_NAME || params.TAG_NAME.trim() == '') {
                            error("❌ Tag를 선택했을 때는 TAG_NAME을 반드시 입력해야 합니다!")
                        } else {
                            checkout scm: [$class: "GitSCM", userRemoteConfigs: [[url: "https://${GIT}", credentialsId: "GitHub"]], branches: [[name: "refs/tags/${params.TAG_NAME}"]]], poll: false
                        }
                    } else {
                        // Tag 빌드가 아닌 Branch 빌드 선택 시 기본 Branch(product)를 Checkout
                        git branch: "${GIT_BRANCH}", credentialsId: "GitHub", url: "https://${GIT}"
                    }
                }
            }
        }
        
        stage("build") {
            steps {
                sh "chmod +x " + BUILDER_LOCATION
                sh BUILDER_LOCATION + " -x test clean build -PexcludeStatic=true"
            }
        }
        
        stage("deploy") {
            steps {
                checkout([
                    $class: "GitSCM",
                    branches: [[name: "main"]],
                    extensions: [
                        // DevOps Repo의 전체 경로가 아닌 특정 경로만 Checkout
                        [$class: "SparseCheckoutPaths", 
                         sparseCheckoutPaths: [
                            [$class: "SparseCheckoutPath", path: "${GIT_DEVOPS_CODEDEPLOY_PATH}"]
                         ]]
                    ],
                    userRemoteConfigs: [[
                        credentialsId: "GitHub",
                        url: "https://${GIT_DEVOPS}"
                    ]]
                ])

                // 배포 파일 생성 및 압축(jar + CodeDeploy 스크립트 > zip)
                // 압축 파일명에 timestamp 포함해 이전 배포 파일들과의 이름 중복 회피
                // 생성된 압축 파일을 S3 Bucket에 업로드
                // AWS CLI로 CodeDeploy 배포 생성
                sh """
                    zip -j ${NAME}-${dateFormat.format(date)}.zip build/libs/carfreecar-0.0.1-SNAPSHOT.jar ${GIT_DEVOPS_CODEDEPLOY_PATH}/*
                    aws s3 cp ${NAME}-${dateFormat.format(date)}.zip s3://${CODEDEPLOY_S3_BUCKET_NAME}/${CODEDEPLOY_S3_BUCKET_FOLDER}/

                    aws deploy create-deployment \
                        --application-name ${CODEDEPLOY_APPLICATION_NAME} \
                        --deployment-group-name ${CODEDEPLOY_DEPLOYMENT_GROUP_NAME} \
                        --region ap-northeast-2 \
                        --s3-location bucket=${CODEDEPLOY_S3_BUCKET_NAME},bundleType=zip,key=${CODEDEPLOY_S3_BUCKET_FOLDER}/${NAME}-${dateFormat.format(date)}.zip \
                        --output json > DEPLOYMENT_ID.json
                """

                // 배포 상태 모니터링 스크립트
                script{
                    // Deployment ID 저장
                    def DEPLOYMENT_ID = readJSON file: "./DEPLOYMENT_ID.json"

                    // Deployment ID로 배포 상태 확인
                    def DEPLOYMENT_RESULT = ""
                    while("$DEPLOYMENT_RESULT" != "\"Succeeded\"") {
                        DEPLOYMENT_RESULT = 
                            sh(
                                script:"aws deploy get-deployment \
                                    --query \"deploymentInfo.status\" \
                                    --region ap-northeast-2 \
                                    --deployment-id ${DEPLOYMENT_ID.deploymentId}",
                                returnStdout: true
                            ).trim()
                        
                        // 현재 배포 상태 출력
                        echo "$DEPLOYMENT_RESULT"

                        // 배포 실패 or 중단 시 break
                        if ("$DEPLOYMENT_RESULT" == "\"Failed\"" || "$DEPLOYMENT_RESULT" == "\"Stopped\"") {
                            throw new Exception("CodeDeploy Failed")
                            break
                        }
                        sleep(10)
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs(
                cleanWhenAborted: true, cleanWhenFailure: true,
                cleanWhenSuccess: true, cleanWhenUnstable: true
            )
            dir("${env.WORKSPACE}@tmp") { deleteDir() }
            dir("${env.WORKSPACE}@script") { deleteDir() }
            dir("${env.WORKSPACE}@script@tmp") { deleteDir() }
        }
    }
}